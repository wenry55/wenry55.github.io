I"m<h1 id="apply">apply</h1>
<h5 id="invoke-a-function-as-a-method-of-an-object">invoke a function as a method of an object</h5>

<blockquote>
  <p>이 함수는 함수형 오브젝트를 파라메터로 주어진 오브젝트의 메서드로 적용한다는 뜻으로 이해하면 될 것 같습니다.
만약 주어진 오브젝트가 null 일 경우, this는 global object를 지칭하게 됩니다.</p>
</blockquote>

<blockquote>
  <p>한편으로 다르게 생각해 보면, 오브젝트와 메서드가 분리되어 있는 형태라고도 생각해 볼 수 있을것 같습니다.</p>
</blockquote>

<h4 id="synopsis">Synopsis</h4>

<p>function.apply(thisobj, args)</p>

<h4 id="arguments">Arguments</h4>
<p><code class="highlighter-rouge">thisobj</code></p>

<p>The object to which function is to be applied. In the body of the function, thisobj becomes the value of the <code class="highlighter-rouge">this</code> keyword. If this argument is <code class="highlighter-rouge">null</code>, the global object is used.</p>

<p>The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).</p>

<blockquote>
  <p>Note: While the syntax of this function is almost identical to that of &gt; call(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.</p>
</blockquote>

<blockquote>
  <p>Note: When the first argument is undefined or null a similar outcome can &gt; be achieved using the array spread syntax.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">fullName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Mary</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Doe</span><span class="dl">"</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>  <span class="c1">// Will return "Mary Doe"</span>
</code></pre></div></div>

<p>먼저 apply 함수를 살펴보면,
이 함수는 한 오브젝트에서 정의한 함수형 오브젝트를 다른 오브젝트에 대해서 사용할 수 있도록 한다.
첫번재 파라메터는 이 함수를 적용할 오브젝트이고, 다음 파라메터들은 이 함수를 호출할 때 사용되는 파라메터 어레이를 지정한다.</p>

<ul>
  <li>Array(5) gives you an array with length 5 but no values, hence you can’t iterate over it.</li>
  <li>Array.apply(null, Array(5)).map(function () {}) gives you an array with length 5 and undefined as values, now it can be iterated over.</li>
  <li>Array.apply(null, Array(5)).map(function (x, i) { return i; }) gives you an array with length 5 and values 0,1,2,3,4.</li>
  <li>Array(5).forEach(alert) does nothing, Array.apply(null, Array(5)).forEach(alert) gives you 5 alerts</li>
  <li>ES6 gives us Array.from so now you can also use Array.from(Array(5)).forEach(alert)</li>
  <li>If you want to initialize with a certain value, these are good to knows…
Array.from(‘abcde’), Array.from(‘x’.repeat(5))
or Array.from({length: 5}, (v, i) =&gt; i)   // gives [0, 1, 2, 3, 4]</li>
</ul>
:ET